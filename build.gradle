version = '0.2.0-SNAPSHOT'

buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
}

['java', 'distribution', 'maven'].each {
    apply plugin: it
}
import org.gradle.util.VersionNumber

String binedVersion = '0.2.0-SNAPSHOT';

sourceCompatibility = '1.8'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    doFirst {
        options.fork = true
        if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
            if (VersionNumber.parse(gradle.gradleVersion) >= VersionNumber.parse('5.0')) {
                options.bootstrapClasspath = files("${System.properties['java.home']}/lib/rt.jar", "$File.pathSeparator${System.properties['java.home']}/jre/lib/jsse.jar")
            } else {
                options.bootClasspath = "${System.properties['java.home']}/lib/rt.jar"
                options.bootClasspath += "$File.pathSeparator${System.properties['java.home']}/jre/lib/jsse.jar"
            }
        }
    }
}

// Disable tests on build
if (!gradle.startParameter.taskNames.any {it.endsWith("test")}) {
    tasks.withType(Test) {enabled = false}
}

task testJar(type: Jar, dependsOn: testClasses) {
    classifier "tests"
    baseName = "test-${project.archivesBaseName}"
    from sourceSets.test.output
}

configurations {
    tests
}

artifacts {
    tests testJar
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.java
}

javadoc {
    if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
        options.addBooleanOption('html5', true)
    }
}

task javadocJar (type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

if (!hasProperty('mainClass')) {
    ext.mainClass = 'org.exbin.bined.jedit.NoMainClass'
}

repositories {
    mavenCentral()
    flatDir {
        dirs "lib"
    }
}

dependencies {
    compile ':jedit'

    compile ":bined-core-${binedVersion}"
    compile ":bined-extended-${binedVersion}"
    compile ":bined-highlight-swing-${binedVersion}"
    compile ":bined-operation-${binedVersion}"
    compile ":bined-operation-swing-${binedVersion}"
    compile ":bined-swing-${binedVersion}"
    compile ":bined-swing-extended-${binedVersion}"
    compile ":paged_data-0.2.0-20200423.194250-5"
    compile ":paged_data-delta-0.2.0-20200124.190959-4"
    compile ':jsr305-3.0.2'
    testCompile group : 'junit', name: 'junit', version: '4.10'
}

jar {
    manifest {
        attributes(
            'Main-Class': mainClass
        )
    }

    from configurations.compile.findAll { it.name != 'jedit.jar' }.collect { it.isDirectory() ? it : zipTree(it) }
    destinationDir = file("$buildDir")
}

distZip.dependsOn jar
distTar.dependsOn jar

distributions {
    main {
        contents {
            from 'src/dist'
            include 'readme.txt'

            into('') {
                from project.jar.archivePath
                include '*'
                rename { filename -> "BinEd.jar" }
            }
        }
    }
}
